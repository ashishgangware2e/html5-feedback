var webkit_tools = {
    $: function (e) {
      return "string" == typeof e ? document.getElementById(e) : e;
    },
    extend: function (a, b) {
      for (var key in b) a[key] = b[key];
      return a;
    },
    empty: function () {},
    compact: function (a) {
      for (var b = [], l = a.length, i = 0; i < l; i++)
        null !== a[i] && b.push(a[i]);
      return b;
    },
    getCalculatedStyle: function (oElm, strCssRule) {
      var strValue = "";
      return (
        document.defaultView && document.defaultView.getComputedStyle
          ? (strValue = document.defaultView
              .getComputedStyle(oElm, "")
              .getPropertyValue(strCssRule))
          : oElm.currentStyle &&
            ((strCssRule = strCssRule.replace(
              /\-(\w)/g,
              function (strMatch, p1) {
                return p1.toUpperCase();
              }
            )),
            (strValue = oElm.currentStyle[strCssRule])),
        strValue
      );
    },
    bindAsEventListener: function (f, object) {
      var __method = f;
      return function (event) {
        __method.call(object, event || window.event);
      };
    },
    cumulativeOffset: function (element) {
      var valueT = 0,
        valueL = 0;
      do {
        if (
          ((valueT += element.offsetTop || 0),
          (valueL += element.offsetLeft || 0),
          element.offsetParent == document.body &&
            "absolute" == element.style.position)
        )
          break;
        element = element.offsetParent;
      } while (element);
      return { left: valueL, top: valueT };
    },
    getDimensions: function (element) {
      var display = element.style.display;
      if ("none" != display && null != display)
        return { width: element.offsetWidth, height: element.offsetHeight };
      var els = element.style,
        originalVisibility = els.visibility,
        originalPosition = els.position,
        originalDisplay = els.display;
      (els.visibility = "hidden"),
        "fixed" != originalPosition && (els.position = "absolute"),
        (els.display = "block");
      var originalWidth = element.clientWidth,
        originalHeight = element.clientHeight;
      return (
        (els.display = originalDisplay),
        (els.position = originalPosition),
        (els.visibility = originalVisibility),
        { width: originalWidth, height: originalHeight }
      );
    },
    hasClassName: function (element, className) {
      var elementClassName = element.className;
      return (
        elementClassName.length > 0 &&
        (elementClassName == className ||
          new RegExp("(^|\\s)" + className + "(\\s|$)").test(elementClassName))
      );
    },
    addClassName: function (element, className) {
      return (
        this.hasClassName(element, className) ||
          (element.className += (element.className ? " " : "") + className),
        element
      );
    },
    removeClassName: function (element, className) {
      return (
        (element.className = this.strip(
          element.className.replace(
            new RegExp("(^|\\s+)" + className + "(\\s+|$)"),
            " "
          )
        )),
        element
      );
    },
    strip: function (s) {
      return s.replace(/^\s+/, "").replace(/\s+$/, "");
    },
  },
  webkit_droppables = function () {
    (this.initialize = function () {
      (this.droppables = []), (this.droppableRegions = []);
    }),
      (this.add = function (root, instance_props) {
        root = webkit_tools.$(root);
        var default_props = {
          accept: [],
          hoverClass: null,
          onDrop: webkit_tools.empty,
          onOver: webkit_tools.empty,
          onOut: webkit_tools.empty,
        };
        (default_props = webkit_tools.extend(
          default_props,
          instance_props || {}
        )),
          this.droppables.push({ r: root, p: default_props });
      }),
      (this.remove = function (root) {
        root = webkit_tools.$(root);
        for (var d = this.droppables, i = d.length; i--; )
          if (d[i].r == root)
            return (
              (d[i] = null), (this.droppables = webkit_tools.compact(d)), !0
            );
        return !1;
      }),
      (this.prepare = function () {
        for (var d = this.droppables, i = d.length, dR = [], r = null; i--; )
          "none" != (r = d[i].r).style.display &&
            dR.push({
              i: i,
              size: webkit_tools.getDimensions(r),
              offset: webkit_tools.cumulativeOffset(r),
            });
        this.droppableRegions = dR;
      }),
      (this.finalize = function (x, y, r, e) {
        var indices = this.isOver(x, y),
          index = this.maxZIndex(indices),
          over = this.process(index, r);
        return over && this.drop(index, r, e), this.process(-1, r), over;
      }),
      (this.check = function (x, y, r) {
        var indices = this.isOver(x, y),
          index = this.maxZIndex(indices);
        return this.process(index, r);
      }),
      (this.isOver = function (x, y) {
        for (
          var dR = this.droppableRegions,
            i = dR.length,
            active = [],
            r = 0,
            maxX = 0,
            minX = 0,
            maxY = 0,
            minY = 0;
          i--;

        )
          (maxY = (minY = (r = dR[i]).offset.top) + r.size.height),
            y > minY &&
              y < maxY &&
              ((maxX = (minX = r.offset.left) + r.size.width),
              x > minX && x < maxX && active.push(r.i));
        return active;
      }),
      (this.maxZIndex = function (indices) {
        for (
          var d = this.droppables,
            l = indices.length,
            index = -1,
            maxZ = -1e8,
            curZ = 0;
          l--;

        )
          (curZ = parseInt(d[indices[l]].r.style.zIndex || 0)) > maxZ &&
            ((maxZ = curZ), (index = indices[l]));
        return index;
      }),
      (this.process = function (index, draggableRoot) {
        if (this.lastIndex != index) {
          if (null != this.lastIndex) {
            var d,
              p = (d = this.droppables[this.lastIndex]).p,
              r = d.r;
            p.hoverClass && webkit_tools.removeClassName(r, p.hoverClass),
              p.onOut(),
              (this.lastIndex = null),
              (this.lastOutput = !1);
          }
          if (-1 != index) {
            var d,
              p = (d = this.droppables[index]).p,
              r = d.r;
            this.hasClassNames(draggableRoot, p.accept) &&
              (p.hoverClass && webkit_tools.addClassName(r, p.hoverClass),
              p.onOver(),
              (this.lastIndex = index),
              (this.lastOutput = !0));
          }
        }
        return this.lastOutput;
      }),
      (this.drop = function (index, r, e) {
        -1 != index && this.droppables[index].p.onDrop(r, e);
      }),
      (this.hasClassNames = function (r, names) {
        var l = names.length;
        if (0 == l) return !0;
        for (; l--; ) if (webkit_tools.hasClassName(r, names[l])) return !0;
        return !1;
      }),
      this.initialize();
  };
webkit_drop = new webkit_droppables();
var webkit_draggable = function (r, ip) {
    (this.initialize = function (root, instance_props) {
      this.root = webkit_tools.$(root);
      var default_props = {
        scroll: !1,
        revert: !1,
        handle: this.root,
        zIndex: 1e3,
        onStart: webkit_tools.empty,
        onEnd: webkit_tools.empty,
      };
      (this.p = webkit_tools.extend(default_props, instance_props || {})),
        (default_props.handle = webkit_tools.$(default_props.handle)),
        this.prepare(),
        this.bindEvents();
    }),
      (this.prepare = function () {
        var rs = this.root.style;
        "absolute" != webkit_tools.getCalculatedStyle(this.root, "position") &&
          (rs.position = "relative"),
          (rs.top = rs.top || "0px"),
          (rs.left = rs.left || "0px"),
          (rs.right = ""),
          (rs.bottom = ""),
          (rs.zIndex = rs.zIndex || "0");
      }),
      (this.bindEvents = function () {
        var handle = this.p.handle;
        (this.ts = webkit_tools.bindAsEventListener(this.touchStart, this)),
          (this.tm = webkit_tools.bindAsEventListener(this.touchMove, this)),
          (this.te = webkit_tools.bindAsEventListener(this.touchEnd, this)),
          handle.addEventListener("touchstart", this.ts, !1),
          handle.addEventListener("touchmove", this.tm, !1),
          handle.addEventListener("touchend", this.te, !1);
      }),
      (this.destroy = function () {
        var handle = this.p.handle;
        handle.removeEventListener("touchstart", this.ts),
          handle.removeEventListener("touchmove", this.tm),
          handle.removeEventListener("touchend", this.te);
      }),
      (this.set = function (key, value) {
        this.p[key] = value;
      }),
      (this.touchStart = function (event) {
        var p = this.p,
          r = this.root,
          rs = r.style,
          t = event.targetTouches[0];
        (touchX = t.pageX),
          (touchY = t.pageY),
          (rs.top = this.root.style.top || "0px"),
          (rs.left = this.root.style.left || "0px"),
          (rs.bottom = null),
          (rs.right = null);
        var rootP = webkit_tools.cumulativeOffset(r),
          cp = this.getPosition();
        (p.rx = cp.x),
          (p.ry = cp.y),
          (p.tx = touchX),
          (p.ty = touchY),
          (p.z = parseInt(this.root.style.zIndex)),
          (rs.zIndex = p.zIndex),
          webkit_drop.prepare(),
          p.onStart();
      }),
      (this.touchMove = function (event) {
        event.preventDefault(), event.stopPropagation();
        var p = this.p,
          r = this.root,
          rs = r.style,
          t = event.targetTouches[0];
        if (null != t) {
          var curX = t.pageX,
            curY = t.pageY,
            delX = curX - p.tx,
            delY = curY - p.ty;
          (rs.left = p.rx + delX + "px"),
            (rs.top = p.ry + delY + "px"),
            p.scroll &&
              ((s = this.getScroll(curX, curY)),
              (0 == s[0] && 0 == s[1]) ||
                window.scrollTo(window.scrollX + s[0], window.scrollY + s[1])),
            webkit_drop.check(curX, curY, r),
            (this.lastCurX = curX),
            (this.lastCurY = curY);
        }
      }),
      (this.touchEnd = function (event) {
        var r = this.root,
          p = this.p,
          dropped = webkit_drop.finalize(
            this.lastCurX,
            this.lastCurY,
            r,
            event
          );
        if ((p.revert && !dropped) || "always" === p.revert) {
          var rs = r.style;
          (rs.top = p.ry + "px"), (rs.left = p.rx + "px");
        }
        (r.style.zIndex = this.p.z), this.p.onEnd();
      }),
      (this.getPosition = function () {
        var rs = this.root.style;
        return { x: parseInt(rs.left || 0), y: parseInt(rs.top || 0) };
      }),
      (this.getScroll = function (pX, pY) {
        var sX = window.scrollX,
          sY = window.scrollY,
          wX = window.innerWidth,
          wY = window.innerHeight,
          scroll_amount = 10,
          scroll_sensitivity = 100,
          delX = 0,
          delY = 0;
        return (
          pY - sY < 100 ? (delY = -10) : sY + wY - pY < 100 && (delY = 10),
          pX - sX < 100 ? (delX = -10) : sX + wX - pX < 100 && (delX = 10),
          [delX, delY]
        );
      }),
      this.initialize(r, ip);
  },
  webkit_click = function (r, ip) {
    (this.initialize = function (root, instance_props) {
      var default_props = { onClick: webkit_tools.empty };
      (this.root = webkit_tools.$(root)),
        (this.p = webkit_tools.extend(default_props, instance_props || {})),
        this.bindEvents();
    }),
      (this.bindEvents = function () {
        var root = this.root;
        (this.ts = webkit_tools.bindAsEventListener(this.touchStart, this)),
          (this.tm = webkit_tools.bindAsEventListener(this.touchMove, this)),
          (this.te = webkit_tools.bindAsEventListener(this.touchEnd, this)),
          root.addEventListener("touchstart", this.ts, !1),
          root.addEventListener("touchmove", this.tm, !1),
          root.addEventListener("touchend", this.te, !1),
          (this.bound = !0);
      }),
      (this.touchStart = function () {
        (this.moved = !1),
          0 == this.bound &&
            (this.root.addEventListener("touchmove", this.tm, !1),
            (this.bound = !0));
      }),
      (this.touchMove = function () {
        (this.moved = !0),
          this.root.removeEventListener("touchmove", this.tm),
          (this.bound = !1);
      }),
      (this.touchEnd = function () {
        0 == this.moved && this.p.onClick();
      }),
      (this.setEvent = function (f) {
        "function" == typeof f && (this.p.onClick = f);
      }),
      (this.unbind = function () {
        var root = this.root;
        root.removeEventListener("touchstart", this.ts),
          root.removeEventListener("touchmove", this.tm),
          root.removeEventListener("touchend", this.te);
      }),
      this.initialize(r, ip);
  };
//# sourceMappingURL=webkitdragdrop.min.js.map
